// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'features/weather_detail/domain/entites/weather_local_info_response_entity/clouds_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/coordinate_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/main_weather_info_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/sunset_sunrise_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/weather_description_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/weather_local_info_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/weather_theme_local_entity.dart';
import 'features/weather_detail/domain/entites/weather_local_info_response_entity/wind_info_local_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2020296912586815034),
    name: 'CloudsLocalEntity',
    lastPropertyId: const obx_int.IdUid(2, 2029130879718000947),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4117948896139807367),
        name: 'all',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2029130879718000947),
        name: 'id',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 122101674717597301),
    name: 'CoordinateLocalEntity',
    lastPropertyId: const obx_int.IdUid(3, 7084379672047051056),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3762488176439350609),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7179224072987518438),
        name: 'lon',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7084379672047051056),
        name: 'lat',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1452786257536380608),
    name: 'MainWeatherInfoLocalEntity',
    lastPropertyId: const obx_int.IdUid(7, 7414315160852359515),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8389070460254807898),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 939761528832068001),
        name: 'temp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3210916401514727804),
        name: 'feelsLike',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6347054082272985964),
        name: 'tempMin',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1874270188855368535),
        name: 'tempMax',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 115429796562963999),
        name: 'pressure',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7414315160852359515),
        name: 'humidity',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 708658179633819782),
    name: 'SunsetSunriseLocalEntity',
    lastPropertyId: const obx_int.IdUid(5, 8364865860151039125),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 541685603498043420),
        name: 'type',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5699903528338353217),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2760847988647629835),
        name: 'country',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5421866716684999529),
        name: 'sunrise',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8364865860151039125),
        name: 'sunset',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 43513889729227778),
    name: 'WeatherDescriptionLocalEntity',
    lastPropertyId: const obx_int.IdUid(4, 6572023200117254005),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1678865789438938177),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2873609124681287397),
        name: 'main',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8187519767630516287),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6572023200117254005),
        name: 'icon',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 7792774307980282920),
    name: 'WeatherInfoLocalEntity',
    lastPropertyId: const obx_int.IdUid(10, 8413562113294765317),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7465189832307202950),
        name: 'mainId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 33609939560370111),
        relationTarget: 'MainWeatherInfoLocalEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8146571413992766258),
        name: 'visibility',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6894792897935184164),
        name: 'windId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 1542312110421153592),
        relationTarget: 'WindInfoLocalEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4653261115851247375),
        name: 'cloudsId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 1419120651406306889),
        relationTarget: 'CloudsLocalEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8208823334772918332),
        name: 'dt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2612376460091285736),
        name: 'sysId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 7250087530661167949),
        relationTarget: 'SunsetSunriseLocalEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 9050992678283082861),
        name: 'timezone',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7710346220363866956),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2209842190617690346),
        name: 'name',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(5, 7400163440858541999),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 8413562113294765317),
        name: 'weatherThemeId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 4997435517344455610),
        relationTarget: 'WeatherThemeLocalEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2791428140261732834),
        name: 'weather',
        targetId: const obx_int.IdUid(5, 43513889729227778),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 2509581355482760228),
    name: 'WeatherThemeLocalEntity',
    lastPropertyId: const obx_int.IdUid(3, 5762643758366019893),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1064272702242298881),
        name: 'firstColorHex',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8254089179040863441),
        name: 'secondColorHex',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5762643758366019893),
        name: 'id',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 4823414048711054618),
    name: 'WindInfoLocalEntity',
    lastPropertyId: const obx_int.IdUid(3, 7006285136982585451),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8693926179620209432),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8582587905068555148),
        name: 'speed',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7006285136982585451),
        name: 'deg',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) {
  return obx.Store(
    getObjectBoxModel(),
    directory: directory,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 4823414048711054618),
    lastIndexId: const obx_int.IdUid(6, 4997435517344455610),
    lastRelationId: const obx_int.IdUid(1, 2791428140261732834),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CloudsLocalEntity: obx_int.EntityDefinition<CloudsLocalEntity>(
      model: _entities[0],
      toOneRelations: (CloudsLocalEntity object) => [],
      toManyRelations: (CloudsLocalEntity object) => {},
      getId: (CloudsLocalEntity object) => object.id,
      setId: (CloudsLocalEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CloudsLocalEntity object, fb.Builder fbb) {
        fbb.startTable(3);
        fbb.addInt64(0, object.all);
        fbb.addInt64(1, object.id ?? 0);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final allParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final object = CloudsLocalEntity(all: allParam, id: idParam);

        return object;
      },
    ),
    CoordinateLocalEntity: obx_int.EntityDefinition<CoordinateLocalEntity>(
      model: _entities[1],
      toOneRelations: (CoordinateLocalEntity object) => [],
      toManyRelations: (CoordinateLocalEntity object) => {},
      getId: (CoordinateLocalEntity object) => object.id,
      setId: (CoordinateLocalEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CoordinateLocalEntity object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addFloat64(1, object.lon);
        fbb.addFloat64(2, object.lat);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lonParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final latParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final object = CoordinateLocalEntity(
          lon: lonParam,
          lat: latParam,
          id: idParam,
        );

        return object;
      },
    ),
    MainWeatherInfoLocalEntity:
        obx_int.EntityDefinition<MainWeatherInfoLocalEntity>(
          model: _entities[2],
          toOneRelations: (MainWeatherInfoLocalEntity object) => [],
          toManyRelations: (MainWeatherInfoLocalEntity object) => {},
          getId: (MainWeatherInfoLocalEntity object) => object.id,
          setId: (MainWeatherInfoLocalEntity object, int id) {
            object.id = id;
          },
          objectToFB: (MainWeatherInfoLocalEntity object, fb.Builder fbb) {
            final tempOffset = object.temp == null
                ? null
                : fbb.writeString(object.temp!);
            fbb.startTable(8);
            fbb.addInt64(0, object.id ?? 0);
            fbb.addOffset(1, tempOffset);
            fbb.addFloat64(2, object.feelsLike);
            fbb.addFloat64(3, object.tempMin);
            fbb.addFloat64(4, object.tempMax);
            fbb.addInt64(5, object.pressure);
            fbb.addInt64(6, object.humidity);
            fbb.finish(fbb.endTable());
            return object.id ?? 0;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final tempParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 6);
            final feelsLikeParam = const fb.Float64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              8,
            );
            final tempMinParam = const fb.Float64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              10,
            );
            final tempMaxParam = const fb.Float64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              12,
            );
            final pressureParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              14,
            );
            final humidityParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              16,
            );
            final idParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              4,
            );
            final object = MainWeatherInfoLocalEntity(
              temp: tempParam,
              feelsLike: feelsLikeParam,
              tempMin: tempMinParam,
              tempMax: tempMaxParam,
              pressure: pressureParam,
              humidity: humidityParam,
              id: idParam,
            );

            return object;
          },
        ),
    SunsetSunriseLocalEntity:
        obx_int.EntityDefinition<SunsetSunriseLocalEntity>(
          model: _entities[3],
          toOneRelations: (SunsetSunriseLocalEntity object) => [],
          toManyRelations: (SunsetSunriseLocalEntity object) => {},
          getId: (SunsetSunriseLocalEntity object) => object.id,
          setId: (SunsetSunriseLocalEntity object, int id) {
            object.id = id;
          },
          objectToFB: (SunsetSunriseLocalEntity object, fb.Builder fbb) {
            final countryOffset = object.country == null
                ? null
                : fbb.writeString(object.country!);
            final sunriseOffset = object.sunrise == null
                ? null
                : fbb.writeString(object.sunrise!);
            final sunsetOffset = object.sunset == null
                ? null
                : fbb.writeString(object.sunset!);
            fbb.startTable(6);
            fbb.addInt64(0, object.type);
            fbb.addInt64(1, object.id ?? 0);
            fbb.addOffset(2, countryOffset);
            fbb.addOffset(3, sunriseOffset);
            fbb.addOffset(4, sunsetOffset);
            fbb.finish(fbb.endTable());
            return object.id ?? 0;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final typeParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              4,
            );
            final idParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              6,
            );
            final countryParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 8);
            final sunriseParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 10);
            final sunsetParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 12);
            final object = SunsetSunriseLocalEntity(
              type: typeParam,
              id: idParam,
              country: countryParam,
              sunrise: sunriseParam,
              sunset: sunsetParam,
            );

            return object;
          },
        ),
    WeatherDescriptionLocalEntity:
        obx_int.EntityDefinition<WeatherDescriptionLocalEntity>(
          model: _entities[4],
          toOneRelations: (WeatherDescriptionLocalEntity object) => [],
          toManyRelations: (WeatherDescriptionLocalEntity object) => {},
          getId: (WeatherDescriptionLocalEntity object) => object.id,
          setId: (WeatherDescriptionLocalEntity object, int id) {
            object.id = id;
          },
          objectToFB: (WeatherDescriptionLocalEntity object, fb.Builder fbb) {
            final mainOffset = object.main == null
                ? null
                : fbb.writeString(object.main!);
            final descriptionOffset = object.description == null
                ? null
                : fbb.writeString(object.description!);
            final iconOffset = object.icon == null
                ? null
                : fbb.writeString(object.icon!);
            fbb.startTable(5);
            fbb.addInt64(0, object.id ?? 0);
            fbb.addOffset(1, mainOffset);
            fbb.addOffset(2, descriptionOffset);
            fbb.addOffset(3, iconOffset);
            fbb.finish(fbb.endTable());
            return object.id ?? 0;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final idParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              4,
            );
            final mainParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 6);
            final descriptionParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 8);
            final iconParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 10);
            final object = WeatherDescriptionLocalEntity(
              id: idParam,
              main: mainParam,
              description: descriptionParam,
              icon: iconParam,
            );

            return object;
          },
        ),
    WeatherInfoLocalEntity: obx_int.EntityDefinition<WeatherInfoLocalEntity>(
      model: _entities[5],
      toOneRelations: (WeatherInfoLocalEntity object) => [
        object.main,
        object.wind,
        object.clouds,
        object.sys,
        object.weatherTheme,
      ],
      toManyRelations: (WeatherInfoLocalEntity object) => {
        obx_int.RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!):
            object.weather,
      },
      getId: (WeatherInfoLocalEntity object) => object.id,
      setId: (WeatherInfoLocalEntity object, int id) {
        object.id = id;
      },
      objectToFB: (WeatherInfoLocalEntity object, fb.Builder fbb) {
        final visibilityOffset = object.visibility == null
            ? null
            : fbb.writeString(object.visibility!);
        final dtOffset = object.dt == null ? null : fbb.writeString(object.dt!);
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        fbb.startTable(11);
        fbb.addInt64(0, object.main.targetId);
        fbb.addOffset(1, visibilityOffset);
        fbb.addInt64(2, object.wind.targetId);
        fbb.addInt64(3, object.clouds.targetId);
        fbb.addOffset(4, dtOffset);
        fbb.addInt64(5, object.sys.targetId);
        fbb.addInt64(6, object.timezone);
        fbb.addInt64(7, object.id ?? 0);
        fbb.addOffset(8, nameOffset);
        fbb.addInt64(9, object.weatherTheme.targetId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final visibilityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final dtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final timezoneParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = WeatherInfoLocalEntity(
          visibility: visibilityParam,
          dt: dtParam,
          timezone: timezoneParam,
          id: idParam,
          name: nameParam,
        );
        object.main.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        object.main.attach(store);
        object.wind.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.wind.attach(store);
        object.clouds.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.clouds.attach(store);
        object.sys.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.sys.attach(store);
        object.weatherTheme.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        object.weatherTheme.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<WeatherInfoLocalEntity>(
          object.weather,
          store,
          obx_int.RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!),
        );
        return object;
      },
    ),
    WeatherThemeLocalEntity: obx_int.EntityDefinition<WeatherThemeLocalEntity>(
      model: _entities[6],
      toOneRelations: (WeatherThemeLocalEntity object) => [],
      toManyRelations: (WeatherThemeLocalEntity object) => {},
      getId: (WeatherThemeLocalEntity object) => object.id,
      setId: (WeatherThemeLocalEntity object, int id) {
        object.id = id;
      },
      objectToFB: (WeatherThemeLocalEntity object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.firstColorHex);
        fbb.addInt64(1, object.secondColorHex);
        fbb.addInt64(2, object.id ?? 0);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final firstColorHexParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final secondColorHexParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final object = WeatherThemeLocalEntity(
          firstColorHex: firstColorHexParam,
          secondColorHex: secondColorHexParam,
          id: idParam,
        );

        return object;
      },
    ),
    WindInfoLocalEntity: obx_int.EntityDefinition<WindInfoLocalEntity>(
      model: _entities[7],
      toOneRelations: (WindInfoLocalEntity object) => [],
      toManyRelations: (WindInfoLocalEntity object) => {},
      getId: (WindInfoLocalEntity object) => object.id,
      setId: (WindInfoLocalEntity object, int id) {
        object.id = id;
      },
      objectToFB: (WindInfoLocalEntity object, fb.Builder fbb) {
        final speedOffset = object.speed == null
            ? null
            : fbb.writeString(object.speed!);
        fbb.startTable(4);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, speedOffset);
        fbb.addInt64(2, object.deg);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final speedParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final degParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final object = WindInfoLocalEntity(
          speed: speedParam,
          deg: degParam,
          id: idParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CloudsLocalEntity] entity fields to define ObjectBox queries.
class CloudsLocalEntity_ {
  /// See [CloudsLocalEntity.all].
  static final all = obx.QueryIntegerProperty<CloudsLocalEntity>(
    _entities[0].properties[0],
  );

  /// See [CloudsLocalEntity.id].
  static final id = obx.QueryIntegerProperty<CloudsLocalEntity>(
    _entities[0].properties[1],
  );
}

/// [CoordinateLocalEntity] entity fields to define ObjectBox queries.
class CoordinateLocalEntity_ {
  /// See [CoordinateLocalEntity.id].
  static final id = obx.QueryIntegerProperty<CoordinateLocalEntity>(
    _entities[1].properties[0],
  );

  /// See [CoordinateLocalEntity.lon].
  static final lon = obx.QueryDoubleProperty<CoordinateLocalEntity>(
    _entities[1].properties[1],
  );

  /// See [CoordinateLocalEntity.lat].
  static final lat = obx.QueryDoubleProperty<CoordinateLocalEntity>(
    _entities[1].properties[2],
  );
}

/// [MainWeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class MainWeatherInfoLocalEntity_ {
  /// See [MainWeatherInfoLocalEntity.id].
  static final id = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[0],
  );

  /// See [MainWeatherInfoLocalEntity.temp].
  static final temp = obx.QueryStringProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[1],
  );

  /// See [MainWeatherInfoLocalEntity.feelsLike].
  static final feelsLike = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[2],
  );

  /// See [MainWeatherInfoLocalEntity.tempMin].
  static final tempMin = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[3],
  );

  /// See [MainWeatherInfoLocalEntity.tempMax].
  static final tempMax = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[4],
  );

  /// See [MainWeatherInfoLocalEntity.pressure].
  static final pressure = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[5],
  );

  /// See [MainWeatherInfoLocalEntity.humidity].
  static final humidity = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
    _entities[2].properties[6],
  );
}

/// [SunsetSunriseLocalEntity] entity fields to define ObjectBox queries.
class SunsetSunriseLocalEntity_ {
  /// See [SunsetSunriseLocalEntity.type].
  static final type = obx.QueryIntegerProperty<SunsetSunriseLocalEntity>(
    _entities[3].properties[0],
  );

  /// See [SunsetSunriseLocalEntity.id].
  static final id = obx.QueryIntegerProperty<SunsetSunriseLocalEntity>(
    _entities[3].properties[1],
  );

  /// See [SunsetSunriseLocalEntity.country].
  static final country = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
    _entities[3].properties[2],
  );

  /// See [SunsetSunriseLocalEntity.sunrise].
  static final sunrise = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
    _entities[3].properties[3],
  );

  /// See [SunsetSunriseLocalEntity.sunset].
  static final sunset = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
    _entities[3].properties[4],
  );
}

/// [WeatherDescriptionLocalEntity] entity fields to define ObjectBox queries.
class WeatherDescriptionLocalEntity_ {
  /// See [WeatherDescriptionLocalEntity.id].
  static final id = obx.QueryIntegerProperty<WeatherDescriptionLocalEntity>(
    _entities[4].properties[0],
  );

  /// See [WeatherDescriptionLocalEntity.main].
  static final main = obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
    _entities[4].properties[1],
  );

  /// See [WeatherDescriptionLocalEntity.description].
  static final description =
      obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
        _entities[4].properties[2],
      );

  /// See [WeatherDescriptionLocalEntity.icon].
  static final icon = obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
    _entities[4].properties[3],
  );
}

/// [WeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class WeatherInfoLocalEntity_ {
  /// See [WeatherInfoLocalEntity.main].
  static final main =
      obx.QueryRelationToOne<
        WeatherInfoLocalEntity,
        MainWeatherInfoLocalEntity
      >(_entities[5].properties[0]);

  /// See [WeatherInfoLocalEntity.visibility].
  static final visibility = obx.QueryStringProperty<WeatherInfoLocalEntity>(
    _entities[5].properties[1],
  );

  /// See [WeatherInfoLocalEntity.wind].
  static final wind =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, WindInfoLocalEntity>(
        _entities[5].properties[2],
      );

  /// See [WeatherInfoLocalEntity.clouds].
  static final clouds =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, CloudsLocalEntity>(
        _entities[5].properties[3],
      );

  /// See [WeatherInfoLocalEntity.dt].
  static final dt = obx.QueryStringProperty<WeatherInfoLocalEntity>(
    _entities[5].properties[4],
  );

  /// See [WeatherInfoLocalEntity.sys].
  static final sys =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, SunsetSunriseLocalEntity>(
        _entities[5].properties[5],
      );

  /// See [WeatherInfoLocalEntity.timezone].
  static final timezone = obx.QueryIntegerProperty<WeatherInfoLocalEntity>(
    _entities[5].properties[6],
  );

  /// See [WeatherInfoLocalEntity.id].
  static final id = obx.QueryIntegerProperty<WeatherInfoLocalEntity>(
    _entities[5].properties[7],
  );

  /// See [WeatherInfoLocalEntity.name].
  static final name = obx.QueryStringProperty<WeatherInfoLocalEntity>(
    _entities[5].properties[8],
  );

  /// See [WeatherInfoLocalEntity.weatherTheme].
  static final weatherTheme =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, WeatherThemeLocalEntity>(
        _entities[5].properties[9],
      );

  /// see [WeatherInfoLocalEntity.weather]
  static final weather =
      obx.QueryRelationToMany<
        WeatherInfoLocalEntity,
        WeatherDescriptionLocalEntity
      >(_entities[5].relations[0]);
}

/// [WeatherThemeLocalEntity] entity fields to define ObjectBox queries.
class WeatherThemeLocalEntity_ {
  /// See [WeatherThemeLocalEntity.firstColorHex].
  static final firstColorHex =
      obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
        _entities[6].properties[0],
      );

  /// See [WeatherThemeLocalEntity.secondColorHex].
  static final secondColorHex =
      obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
        _entities[6].properties[1],
      );

  /// See [WeatherThemeLocalEntity.id].
  static final id = obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
    _entities[6].properties[2],
  );
}

/// [WindInfoLocalEntity] entity fields to define ObjectBox queries.
class WindInfoLocalEntity_ {
  /// See [WindInfoLocalEntity.id].
  static final id = obx.QueryIntegerProperty<WindInfoLocalEntity>(
    _entities[7].properties[0],
  );

  /// See [WindInfoLocalEntity.speed].
  static final speed = obx.QueryStringProperty<WindInfoLocalEntity>(
    _entities[7].properties[1],
  );

  /// See [WindInfoLocalEntity.deg].
  static final deg = obx.QueryIntegerProperty<WindInfoLocalEntity>(
    _entities[7].properties[2],
  );
}
